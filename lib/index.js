// Generated by CoffeeScript 2.0.2

/*
 * parameters(config)

## About options

Options are defined at the "config" level or for each command.

## About main

Main is what's left after the options. Like options, "main" is 
defined at the "config" level or for each command.

Parameters are defined with the following properties:

* name:     name of the two dash parameter in the command (eg "--my_name") and in the returned parse object unless label is defined.
* label:    not yet implemented, see name
* shortcut: name of the one dash parameter in the command (eg "-n"), must be one charactere
* required: boolean, throw an exception when true and the parameter is not defined
* type:     one of 'string', 'boolean', 'integer' or 'array'

 */
var Parameters, array_to_object, is_object, load, merge, pad, set_default, types,
  indexOf = [].indexOf;

pad = require('pad');

load = require('./load');

merge = require('./merge');

types = ['string', 'boolean', 'integer', 'array'];

Parameters = function(config = {}) {
  var command, sanitize_command, sanitize_commands, sanitize_options;
  this.config = config;
  // Sanitize options
  sanitize_options = function(config) {
    var name, option, ref, ref1, results;
    if (config.options == null) {
      config.options = {};
    }
    if (Array.isArray(config.options)) {
      // Convert from object with keys as options name to an array
      config.options = array_to_object(config.options, 'name');
    }
    ref = config.options;
    results = [];
    for (name in ref) {
      option = ref[name];
      option.name = name;
      // Access option by key
      if (option.type == null) {
        option.type = 'string';
      }
      if (ref1 = option.type, indexOf.call(types, ref1) < 0) {
        throw Error(`Invalid option type ${JSON.stringify(option.type)}`);
      }
      if (option.shortcut) {
        config.shortcuts[option.shortcut] = option.name;
      }
      if (typeof option.one_of === 'string') {
        option.one_of = [option.one_of];
      }
      if (option.one_of && !Array.isArray(option.one_of)) {
        throw Error(`Invalid option one_of "${JSON.stringify(option.one_of)}"`);
      } else {
        results.push(void 0);
      }
    }
    return results;
  };
  sanitize_command = function(command, parent) {
    if (command.strict == null) {
      command.strict = parent.strict;
    }
    command.shortcuts = {};
    if (command.command == null) {
      command.command = parent.command;
    }
    sanitize_options(command);
    sanitize_commands(command);
    return command;
  };
  sanitize_commands = function(config) {
    var command, name, ref, results;
    if (config.commands == null) {
      config.commands = {};
    }
    if (Array.isArray(config.commands)) {
      config.commands = array_to_object(config.commands, 'name');
    }
    ref = config.commands;
    results = [];
    for (name in ref) {
      command = ref[name];
      if (command.name && command.name !== name) {
        throw Error(`Incoherent Command Name: key ${JSON.stringify(name)} is not equal with name ${JSON.stringify(command.name)}`);
      }
      command.name = name;
      if (command.description == null) {
        command.description = `No description yet for the ${command.name} command`;
      }
      results.push(sanitize_command(command, config));
    }
    return results;
  };
  // An object where key are command and values are object map between shortcuts and names
  if (config.name == null) {
    config.name = 'myapp';
  }
  if (config.description == null) {
    config.description = 'No description yet';
  }
  config.shortcuts = {};
  if (config.strict == null) {
    config.strict = false;
  }
  if (config.command == null) {
    config.command = 'command';
  }
  sanitize_options(config);
  sanitize_commands(config);
  if (!config.commands.help) {
    if (Object.keys(config.commands).length) {
      command = sanitize_command({
        name: 'help',
        description: `Display help information about ${config.name}`,
        main: {
          name: 'name',
          description: 'Help about a specific command'
        }
      }, config);
      config.commands[command.name] = command;
    } else {
      config.options['help'] = {
        name: 'help',
        shortcut: 'h',
        description: 'Display help information',
        type: 'boolean'
      };
    }
  }
  return this;
};

/*

## `run([argv])`

Parse the arguments and execute the module defined by the "module" option.

You should only pass the parameters and the not the script name.

Example

result = parameters(
  commands: [
    name: 'start'
    run: function(){ return 'something'; }
    options: [
      name: 'debug'
    ]
  ]
).run ['start', '-d', 'Hello']

 */
Parameters.prototype.run = function(argv = process, ...args) {
  var extended, inject, params, run;
  params = this.parse(argv);
  if (params[this.config.command]) {
    run = this.config.commands[params[this.config.command]].run;
    extended = this.config.commands[params[this.config.command]].extended;
    if (!run) {
      throw Error(`Missing run definition for command ${JSON.stringify(params[this.config.command])}`);
    }
  } else {
    run = this.config.run;
    extended = this.config.extended;
    if (!run) {
      throw Error('Missing run definition');
    }
  }
  if (typeof run === 'string') {
    // Load the module
    run = this.load(run);
  }
  inject = [params];
  if (extended) {
    inject.push(argv);
  }
  if (extended) {
    inject.push(this.config);
  }
  return run.call(this, ...inject, ...args);
};

/*

## `load(module)`

Load and return a module, use `require.main.require` by default.

 */
Parameters.prototype.load = function(module) {
  if (!this.config.load) {
    return load(module);
  } else {
    if (typeof this.config.load === 'string') {
      return load(this.config.load)(module);
    } else {
      return this.config.load(module);
    }
  }
};

/*

## `parse([argv])`

Convert process arguments into a usable object. Argument may
be in the form of a string or an array. If not provided, it 
parse the arguments present in  `process.argv`.

You should only pass the parameters and the not the script name.

Example

  params = argv.parse ['start', '--watch', __dirname, '-s', 'my', '--command']
  params.should.eql
    action: 'start'
    watch: __dirname
    strict: true
    command: 'my --command'

 */
Parameters.prototype.parse = function(argv = process) {
  var config, index, params, parse;
  if (typeof argv === 'string') {
    argv = argv.split(' ');
  }
  index = 0;
  // Remove node and script argv elements
  if (argv === process) {
    index = 2;
    argv = argv.argv;
  }
  // Extracted parameters
  params = {};
  parse = (config) => {
    var _, command, i, key, leftover, len, main, option, ref, ref1, shortcut, type, value, values;
    // Read options
    while (true) {
      if (argv.length === index || argv[index][0] !== '-') {
        break;
      }
      key = argv[index++];
      shortcut = key[1] !== '-';
      key = key.substring((shortcut ? 1 : 2), key.length);
      if (shortcut) {
        shortcut = key;
      }
      if (shortcut) {
        key = config.shortcuts[shortcut];
      }
      option = (ref = config.options) != null ? ref[key] : void 0;
      if (!shortcut && config.strict && !option) {
        throw Error(`Invalid option ${JSON.stringify(key)}`);
      }
      if (shortcut && !option) {
        throw Error(`Invalid shortcut '${shortcut}'`);
      }
      // Auto discovery
      if (!option) {
        type = argv[index] && argv[index][0] !== '-' ? 'string' : 'boolean';
        option = {
          name: key,
          type: type
        };
      }
      switch (option.type) {
        case 'boolean':
          params[key] = true;
          break;
        case 'string':
          value = argv[index++];
          if (value == null) {
            throw Error(`Invalid Option: no value found for option ${JSON.stringify(key)}`);
          }
          if (value[0] === '-') {
            throw Error(`Invalid Option: no value found for option ${JSON.stringify(key)}`);
          }
          params[key] = value;
          break;
        case 'integer':
          value = argv[index++];
          if (value == null) {
            throw Error(`Invalid Option: no value found for option ${JSON.stringify(key)}`);
          }
          if (value[0] === '-') {
            throw Error(`Invalid Option: no value found for option ${JSON.stringify(key)}`);
          }
          params[key] = parseInt(value, 10);
          break;
        case 'array':
          value = argv[index++];
          if (value == null) {
            throw Error(`Invalid Option: no value found for option ${JSON.stringify(key)}`);
          }
          if (value[0] === '-') {
            throw Error(`Invalid Option: no value found for option ${JSON.stringify(key)}`);
          }
          if (params[key] == null) {
            params[key] = [];
          }
          params[key].push(...value.split(','));
      }
    }
    ref1 = config.options;
    // Check against required options
    for (_ in ref1) {
      option = ref1[_];
      if (option.required) {
        if (!(params.help || (params[option.name] != null))) {
          throw Error(`Required option argument "${option.name}"`);
        }
      }
      if (option.one_of) {
        values = params[option.name];
        if (!Array.isArray(values)) {
          values = [values];
        }
        for (i = 0, len = values.length; i < len; i++) {
          value = values[i];
          if (indexOf.call(option.one_of, value) < 0) {
            throw Error(`Invalid value "${value}" for option "${option.name}"`);
          }
        }
      }
    }
    // We still have some argument to parse
    if (argv.length !== index) {
      // Store the full command in the return object
      leftover = argv.slice(index).join(' ');
      if (config.main) {
        params[config.main.name] = leftover;
      } else {
        command = argv[index];
        if (!config.commands[command]) {
          // Validate the command
          throw Error(`Fail to parse end of command "${leftover}"`);
        }
        // Set the parameter relative to the command
        if (typeof params[config.command] === 'string') {
          params[config.command] = [params[config.command]];
        }
        if (Array.isArray(params[config.command])) {
          params[config.command].push(argv[index++]);
        } else {
          params[config.command] = argv[index++];
        }
        // Parse child configuration
        parse(config.commands[command], argv);
      }
    }
    
    // Command mode but no command are found, default to help
    // Happens with global options without a command
    if (Object.keys(this.config.commands).length && !params[this.config.command]) {
      params[this.config.command] = 'help';
    }
    // Check against required main
    main = config.main;
    if (main) {
      if (main.required) {
        if (params[main.name] == null) {
          throw Error(`Required main argument "${main.name}"`);
        }
      }
    }
    return params;
  };
  // If they are commands (other than help) and no arguments are provided,
  // we default to the help action
  if (Object.keys(this.config.commands).length && argv.length === index) {
    argv.push('help');
  }
  if (Object.keys(this.config.commands).length && argv[index].substr(0, 1) !== '-') {
    config = this.config.commands[argv[index]];
    if (!config) {
      throw Error(`Invalid Command: "${argv[index]}"`);
    }
    params[this.config.command] = argv[index++];
  } else {
    config = this.config;
  }
  // Start the parser
  params = parse(config, argv);
  // Enrich params with default values
  set_default(this.config, params);
  return params;
};

/*

## `stringify([script], params)`

Convert an object into process arguments.

 */
Parameters.prototype.stringify = function(params, options = {}) {
  var argv, key, keys, stringify, value;
  argv = options.script ? [process.execPath, options.script] : [];
  keys = {};
  // Validate command
  // if params[@config.command]
  //   throw Error "Invalid Command '#{params[@config.command]}'" unless @config.commands[params[@config.command]]
  // Enrich params with default values
  // if params[@config.command]
  //   for _, option of @config.commands[params[@config.command]].options
  //     params[option.name] ?= option.default if option.default?
  // for _, option of @config.options
  //   params[option.name] ?= option.default if option.default?
  set_default(this.config, params);
  // Stringify
  stringify = (config) => {
    var _, command, i, key, len, option, ref, val, value;
    ref = config.options;
    for (_ in ref) {
      option = ref[_];
      key = option.name;
      keys[key] = true;
      value = params[key];
      if (option.required && (value == null)) {
        // Validate required value
        throw Error(`Required option argument "${key}"`);
      }
      // Validate value against option "one_of"
      if ((value != null) && option.one_of) {
        if (!Array.isArray(value)) {
          value = [value];
        }
        for (i = 0, len = value.length; i < len; i++) {
          val = value[i];
          if (indexOf.call(option.one_of, val) < 0) {
            throw Error(`Invalid value "${val}" for option "${option.name}"`);
          }
        }
      }
      // Serialize
      if (value) {
        switch (option.type) {
          case 'boolean':
            argv.push(`--${key}`);
            break;
          case 'string':
          case 'integer':
            argv.push(`--${key}`);
            argv.push(`${value}`);
            break;
          case 'array':
            argv.push(`--${key}`);
            argv.push(`${value.join(',')}`);
        }
      }
    }
    if (config.main) {
      value = params[config.main.name];
      if (config.main.required && (value == null)) {
        throw Error(`Required main argument "${config.main.name}"`);
      }
      keys[config.main.name] = value;
      if (value != null) {
        argv.push(value);
      }
    }
    // Recursive
    if (Object.keys(config.commands).length) {
      command = params[config.command];
      if (Array.isArray(command)) {
        command = params[config.command].shift();
      }
      argv.push(command);
      keys[config.command] = command;
      // Stringify child configuration
      return stringify(config.commands[command]);
    }
  };
  stringify(this.config);
  // Handle params not defined in the configuration
  // Note, they are always pushed to the end and associated with the deepest child
  for (key in params) {
    value = params[key];
    if (keys[key]) {
      continue;
    }
    if (this.config.strict) {
      throw Error(`Invalid option ${JSON.stringify(key)}`);
    }
    if (typeof value === 'boolean') {
      if (value) {
        argv.push(`--${key}`);
      }
    } else if (typeof value === 'undefined' || value === null) {

    } else {
      // nothing
      argv.push(`--${key}`);
      argv.push(`${value}`);
    }
  }
  return argv;
};

/*

## `help([command])`

Return a string describing the usage of the overall command or one of its
command.

 */
Parameters.prototype.help = function(command) {
  var _, content, describeCommand, describeOption, description, main, name, option, options, ref, ref1, ref2, synopsis;
  if (command) {
    if (!this.config.commands[command]) {
      throw Error(`Invalid Command: "${command}"`);
    }
    command = this.config.commands[command];
  }
  describeOption = function(option, pad_option, pad_description) {
    var content, shortcut;
    shortcut = option.shortcut ? `-${option.shortcut} ` : '';
    content = ' '.repeat(pad_option);
    content += pad(`${shortcut}--${option.name}`, pad_description - pad_option);
    content += option.description;
    return content += '\n';
  };
  describeCommand = function(command) {
    var _, content, description, option, ref;
    ({description} = command);
    content = pad(`    ${command.name}`, 24);
    content += command.description;
    content += '\n';
    if (command.options) {
      ref = command.options;
      for (_ in ref) {
        option = ref[_];
        content += describeOption(option, 6, 26);
      }
    }
    if (command.main) {
      content += pad(`      ${command.main.name}`, 26);
      content += command.main.description;
      content += '\n';
    }
    return content;
  };
  if (command && command.name !== 'help') {
    // Command help
    synopsis = this.config.name + ' ' + command.name;
    if (Object.keys(command.options).length) {
      options = 'options...';
      if (!(Object.values(command.options).filter(function(o) {
        return o.required;
      })).length) {
        options = `[${options}]`;
      }
      synopsis += ` ${options}`;
    }
    if (command.main) {
      main = `${command.main.name}`;
      if (!command.main.required) {
        main = `[${main}]`;
      }
      synopsis += ` ${main}`;
    }
    content = `NAME\n    ${this.config.name} ${command.name} - ${command.description}\nSYNOPSIS\n    ${synopsis}\nDESCRIPTION\n`;
    return content += describeCommand(command);
  } else {
    ({name, description} = this.config);
    // Full help
    content = `NAME\n    ${this.config.name} - ${this.config.description}\n`;
    content += 'SYNOPSIS\n';
    content += `    ${name}`;
    if (Object.keys(this.config.commands).length) {
      content += ' command';
    }
    content += ' [options...]';
    content += '\n';
    if (Object.keys(this.config.commands).length) {
      content += '    where command is one of';
      content += '\n';
    }
    ref = this.config.commands;
    for (_ in ref) {
      command = ref[_];
      content += pad(`      ${command.name}`, 24);
      content += command.description || `No description yet for the ${command.name} command`;
      content += '\n';
    }
    content += 'DESCRIPTION\n';
    ref1 = this.config.options;
    // Describe each option
    for (_ in ref1) {
      option = ref1[_];
      content += describeOption(option, 4, 24);
    }
    if (this.config.main) {
      content += pad(`    ${this.config.main.name}`, 24);
      content += this.config.main.description;
      content += '\n';
    }
    ref2 = this.config.commands;
    // Describe each command
    for (_ in ref2) {
      command = ref2[_];
      content += describeCommand(command);
    }
    // Add examples
    content += 'EXAMPLES\n';
    if (Object.keys(this.config.commands).length) {
      content += pad(`    ${this.config.name || '/path/to/app'} help`, 24);
      content += "Show this message";
    } else {
      content += pad(`    ${this.config.name || '/path/to/app'} --help`, 24);
      content += "Show this message";
    }
    content += '\n';
    return content;
  }
};

module.exports = function(config) {
  return new Parameters(config);
};

module.exports.Parameters = Parameters;

// Distinguish plain literal object from arrays
is_object = function(obj) {
  return obj && typeof obj === 'object' && !Array.isArray(obj);
};

// Convert an array to an object
array_to_object = function(elements, key) {
  var element, i, len, opts;
  opts = {};
  for (i = 0, len = elements.length; i < len; i++) {
    element = elements[i];
    opts[element[key]] = element;
  }
  return opts;
};

// Given a configuration, apply default values to the parameters
set_default = function(config, params, tempparams = null) {
  var _, command, name1, option, ref;
  if (tempparams == null) {
    tempparams = merge({}, params);
  }
  if (Object.keys(config.commands).length) {
    command = tempparams[config.command];
    if (Array.isArray(command)) {
      command = tempparams[config.command].shift();
    }
    if (!config.commands[command]) {
      throw Error(`Invalid Command: "${command}"`);
    }
    params = set_default(config.commands[command], params, tempparams);
  }
  ref = config.options;
  for (_ in ref) {
    option = ref[_];
    if (option.default != null) {
      if (params[name1 = option.name] == null) {
        params[name1] = option.default;
      }
    }
  }
  return params;
};
