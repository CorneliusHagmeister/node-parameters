// Generated by CoffeeScript 2.0.2

/*
parameters(config)
==================

About options
-------------
Options are defined at the "config" level or for each command.

About main
----------
Main is what's left after the options. Like options, "main" is 
defined at the "config" level or for each command.

Parameters are defined with the following properties
*   name:     name of the two dash parameter in the command (eg "--my_name") and in the returned parse object unless label is defined.
*   label:    not yet implemented, see name
*   shortcut: name of the one dash parameter in the command (eg "-n"), must be one charactere
*   required: boolean, throw an exception when true and the parameter is not defined
*   type:     one of 'string', 'boolean', 'integer' or 'array'

 */
var Parameters, pad, path, types,
  indexOf = [].indexOf;

path = require('path');

pad = require('pad');

types = ['string', 'boolean', 'integer', 'array'];

Parameters = function(config = {}) {
  var command, commands, i, len, makeCommand, options, ref;
  this.config = config;
  // Sanitize options
  options = function(command) {
    var fn, i, len, option, ref, results;
    ref = command.options;
    // Access option by key
    fn = function(option) {
      return command.options.__defineGetter__(option.name, function() {
        return option;
      });
    };
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      option = ref[i];
      fn(option);
      if (option.type == null) {
        option.type = 'string';
      }
      if (types.indexOf(option.type) === -1) {
        throw new Error(`Invalid option type ${JSON.stringify(option.type)}`);
      }
      command.shortcuts[option.shortcut] = option.name;
      if (typeof options.one_of === 'string') {
        options.one_of = [options.one_of];
      }
      if (options.one_of && !Array.isArray(options.one_of)) {
        throw new Error(`Invalid option one_of "${JSON.stringify(option.one_of)}"`);
      } else {
        results.push(void 0);
      }
    }
    return results;
  };
  // An object where key are command and values are object map between shortcuts and names
  config.shortcuts = {};
  if (config.options == null) {
    config.options = [];
  }
  options(config);
  if (config.command == null) {
    config.command = 'command';
  }
  if (config.commands == null) {
    config.commands = [];
  }
  if (!Array.isArray(config.commands)) {
    config.commands = [config.commands];
  }
  makeCommand = function(command) {
    config.commands.__defineGetter__(command.name, function() {
      return command;
    });
    if (command.strict == null) {
      command.strict = config.strict;
    }
    command.shortcuts = {};
    if (command.options == null) {
      command.options = [];
    }
    if (!Array.isArray(command.options)) {
      command.options = [command.options];
    }
    return options(command);
  };
  ref = config.commands;
  for (i = 0, len = ref.length; i < len; i++) {
    command = ref[i];
    makeCommand(command);
  }
  if (!config.commands.help) {
    if (config.commands.length) {
      commands = {
        name: 'help',
        description: `Display help information about ${config.name}`,
        main: {
          name: 'name',
          description: 'Help about a specific command'
        }
      };
      config.commands.push(commands);
      makeCommand(commands);
    } else {
      config.options.push({
        name: 'help',
        shortcut: 'h',
        description: "Display help information"
      });
    }
  }
  return this;
};

/*

`parse([argv])`
----------------

Convert process arguments into a usable object. Argument may
be in the form of a string or an array. If not provided, it 
parse the arguments present in  `process.argv`.

You should only pass the parameters and the not the script name.

Example

params = argv.parse ['start', '--watch', __dirname, '-s', 'my', '--command']
params.should.eql
  action: 'start'
  watch: __dirname
  strict: true
  command: 'my --command'

*/
Parameters.prototype.parse = function(argv = process) {
  var config, index, params, parse;
  if (typeof argv === 'string') {
    argv = argv.split(' ');
  }
  index = 0;
  // Remove node and script argv elements
  if (argv === process) {
    index = 2;
    argv = argv.argv;
  }
  // Extracted parameters
  params = {};
  parse = (config) => {
    var i, j, key, len, len1, main, option, options, ref, ref1, shortcut, type, value, values;
    while (true) {
      if (argv.length === index || argv[index].substr(0, 1) !== '-') {
        break;
      }
      key = argv[index++];
      shortcut = key.substr(1, 1) !== '-';
      key = key.substring((shortcut ? 1 : 2), key.length);
      if (shortcut) {
        shortcut = key;
      }
      if (shortcut) {
        key = config.shortcuts[shortcut];
      }
      option = (ref = config.options) != null ? ref[key] : void 0;
      if (!shortcut && config.strict && !option) {
        throw new Error(`Invalid option '${key}'`);
      }
      if (shortcut && !option) {
        throw new Error(`Invalid shortcut '${shortcut}'`);
      }
      if (!option) {
        type = argv[index] && argv[index][0] !== '-' ? 'string' : 'boolean';
        option = {
          name: key,
          type: type
        };
      }
      switch (option.type) {
        case 'boolean':
          params[key] = true;
          break;
        case 'string':
          params[key] = argv[index++];
          break;
        case 'integer':
          params[key] = parseInt(argv[index++], 10);
          break;
        case 'array':
          if (params[key] == null) {
            params[key] = [];
          }
          params[key].push(...argv[index++].split(','));
      }
    }
    // Check against required options
    options = config.options;
    if (options) {
      for (i = 0, len = options.length; i < len; i++) {
        option = options[i];
        if (option.required) {
          if (!(params.help || (params[option.name] != null))) {
            throw new Error(`Required argument "${option.name}"`);
          }
        }
        if (option.one_of) {
          values = params[option.name];
          if (!Array.isArray(values)) {
            values = [values];
          }
          for (j = 0, len1 = values.length; j < len1; j++) {
            value = values[j];
            if (indexOf.call(option.one_of, value) < 0) {
              throw Error(`Invalid value "${value}" for option "${option.name}"`);
            }
          }
        }
      }
    }
    // params[option.name] ?= null
    // We still have some argument to parse
    if (argv.length !== index) {
      // Store the full command in the return object
      main = argv.slice(index).join(' ');
      if (config.main) {
        params[config.main.name] = main;
      } else {
        if ((ref1 = config.commands) != null ? ref1[argv[index]] : void 0) {
          config = this.config.commands[argv[index]];
          params[this.config.command] = argv[index++];
          parse(config, argv);
        } else {
          throw new Error(`Fail to parse end of command "${main}"`);
        }
      }
    }
    // Check against required main
    main = config.main;
    if (main) {
      if (main.required) {
        if (params[main.name] == null) {
          throw new Error(`Required main argument "${main.name}"`);
        }
      }
    }
    // params[main.name] ?= null
    return params;
  };
  // If they are commands (other than help) and no arguments are provided,
  // we default to the help action
  if (this.config.commands.length && argv.length === index) {
    argv.push('help');
  }
  if (this.config.commands.length && argv[index].substr(0, 1) !== '-') {
    config = this.config.commands[argv[index]];
    if (!config) {
      throw new Error(`Invalid command '${argv[index]}'`);
    }
    params[this.config.command] = argv[index++];
  } else {
    config = this.config;
  }
  return parse(config, argv);
};

/*

`stringify([script], params)`
------------------------

Convert an object into process arguments.

*/
Parameters.prototype.stringify = function(script, params) {
  var argv, config, key, keys, stringify, value;
  if (arguments.length === 1) {
    params = script;
    script = null;
  }
  argv = script ? [process.execPath, script] : [];
  keys = {};
  stringify = (config) => {
    var i, j, key, len, len1, option, ref, val, value;
    ref = config.options;
    for (i = 0, len = ref.length; i < len; i++) {
      option = ref[i];
      key = option.name;
      keys[key] = true;
      value = params[key];
      if (option.required && (value == null)) {
        // delete params[key]
        throw new Error(`Required option "${key}"`);
      }
      if ((value != null) && option.one_of) {
        if (!Array.isArray(value)) {
          value = [value];
        }
        for (j = 0, len1 = value.length; j < len1; j++) {
          val = value[j];
          if (indexOf.call(option.one_of, val) < 0) {
            throw Error(`Invalid value "${val}" for option "${option.name}"`);
          }
        }
      }
      switch (option.type) {
        case 'boolean':
          if (value) {
            argv.push(`--${key}`);
          }
          break;
        case 'string':
        case 'integer':
          argv.push(`--${key}`);
          argv.push(`${value}`);
          break;
        case 'array':
          argv.push(`--${key}`);
          argv.push(`${value.join(',')}`);
      }
    }
    if (config.main) {
      value = params[config.main.name];
      if (config.main.required && (value == null)) {
        // delete params[config.main.name]
        throw new Error(`Required main argument "${config.main.name}"`);
      }
      keys[config.main.name] = value;
      if (value != null) {
        return argv.push(value);
      }
    }
  };
  stringify(this.config);
  if (params[this.config.command]) {
    config = this.config.commands[params[this.config.command]];
    if (!config) {
      throw new Error(`Invalid command '${params[this.config.command]}'`);
    }
    argv.push(params[this.config.command]);
    keys[this.config.command] = params[this.config.command];
    stringify(config);
  }
  // Check keys
  for (key in params) {
    value = params[key];
    if (keys[key]) {
      // throw new Error "Invalid option '#{key}'" unless keys[key]
      continue;
    }
    if (this.config.strict) {
      throw new Error(`Invalid option '${key}'`);
    }
    if (typeof value === 'boolean') {
      if (value) {
        argv.push(`--${key}`);
      }
    } else if (typeof value === 'undefined' || value === null) {

    } else {
      // nothing
      argv.push(`--${key}`);
      argv.push(`${value}`);
    }
  }
  return argv;
};

/*

`help([command])`
----------------

Return a string describing the usage of the overall command or one of its
command.

*/
Parameters.prototype.help = function(command) {
  var config, content, describeCommand, describeOption, i, j, k, len, len1, len2, main, option, options, ref, ref1, ref2, shortcut, synopsis;
  config = this.config.commands[command];
  if ((command != null) && !config) {
    throw Error(`Invalid command "${command}"`);
  }
  describeOption = function(option) {
    var content;
    content = pad(`      -${option.shortcut} --${option.name}`, 26);
    content += option.description;
    return content += '\n';
  };
  describeCommand = function(config) {
    var content, i, len, option, ref;
    content = pad(`    ${config.name}`, 24);
    content += config.description;
    content += '\n';
    if (config.options) {
      ref = config.options;
      for (i = 0, len = ref.length; i < len; i++) {
        option = ref[i];
        content += describeOption(option);
      }
    }
    if (config.main) {
      content += pad(`      ${config.main.name}`, 26);
      content += config.main.description;
      content += '\n';
    }
    return content;
  };
  if (command && command !== 'help') {
    // Command help
    config = this.config.commands[command];
    synopsis = this.config.name + ' ' + command;
    if (config.options.length) {
      options = 'options...';
      if (!(config.options.filter(function(o) {
        return o.required;
      })).length) {
        options = `[${options}]`;
      }
      synopsis += ` ${options}`;
    }
    if (config.main) {
      main = `${config.main.name}`;
      if (!config.main.required) {
        main = `[${main}]`;
      }
      synopsis += ` ${main}`;
    }
    content = `NAME\n    ${this.config.name} ${command} - ${config.description}\nSYNOPSIS\n    ${synopsis}\nDESCRIPTION\n`;
    return content += describeCommand(config);
  } else {
    // Full help
    content = `NAME\n    ${this.config.name} - ${this.config.description}\n`;
    content += 'SYNOPSIS\n';
    content += `    ${this.config.name}`;
    if (this.config.commands.length) {
      content += ' command';
    }
    content += ' [options...]';
    content += '\n';
    if (this.config.commands.length) {
      content += '    where command is one of';
      content += '\n';
    }
    ref = this.config.commands;
    for (i = 0, len = ref.length; i < len; i++) {
      command = ref[i];
      content += pad(`      ${command.name}`, 24);
      content += command.description;
      content += '\n';
    }
    content += 'DESCRIPTION\n';
    ref1 = this.config.options;
    // Describe each option
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      option = ref1[j];
      shortcut = option.shortcut ? `-${option.shortcut} ` : '';
      content += pad(`    ${shortcut}--${option.name}`, 24);
      content += option.description;
      content += '\n';
    }
    if (this.config.main) {
      content += pad(`    ${this.config.main.name}`, 24);
      content += this.config.main.description;
      content += '\n';
    }
    ref2 = this.config.commands;
    // Describe each command
    for (k = 0, len2 = ref2.length; k < len2; k++) {
      command = ref2[k];
      content += describeCommand(command);
    }
    // Add examples
    content += 'EXAMPLES\n';
    if (this.config.commands.length) {
      content += `    ${this.config.name} help       Show this message`;
    } else {
      content += `    ${this.config.name} --help     Show this message`;
    }
    content += '\n';
    return content;
  }
};

module.exports = function(config) {
  return new Parameters(config);
};

module.exports.Parameters = Parameters;
