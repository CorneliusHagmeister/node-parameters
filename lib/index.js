// Generated by CoffeeScript 1.4.0
var Parameters, pad, path;

path = require('path');

pad = require('pad');

Parameters = function(config) {
  var action, main, option, _fn, _fn1, _i, _j, _len, _len1, _ref, _ref1, _ref2,
    _this = this;
  this.config = config != null ? config : {};
  this.bynames = {};
  this.shortcuts = {};
  _ref = config.actions;
  _fn = function(action) {
    return config.actions.__defineGetter__(action.name, function() {
      return action;
    });
  };
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    action = _ref[_i];
    _fn(action);
    main = action.main;
    this.bynames[action.name] = {};
    this.shortcuts[action.name] = {};
    if (main) {
      this.bynames[action.name][main.name] = main;
    }
    if (action.options) {
      _ref1 = action.options;
      _fn1 = function(option) {
        return action.options.__defineGetter__(option.name, function() {
          return option;
        });
      };
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        option = _ref1[_j];
        _fn1(option);
        if ((_ref2 = option.type) == null) {
          option.type = 'string';
        }
        this.bynames[action.name][option.name] = option;
        this.shortcuts[action.name][option.shortcut] = option.name;
      }
    }
  }
  if (!config.actions.help) {
    config.actions.push({
      name: 'help',
      description: "Display help information about " + config.name,
      main: {
        name: 'command',
        description: 'Help about a specific action'
      }
    });
  }
  return this;
};

/*

`help([action])`
----------------

Return a string describing the usage of the overall command or one of its action.
*/


Parameters.prototype.help = function(action) {
  var command, content, describeCommand, describeOption, main, options, synopsis, _i, _j, _len, _len1, _ref, _ref1;
  command = this.config.actions[action];
  describeOption = function(option) {
    var content;
    content = pad("      -" + option.shortcut + " --" + option.name, 26);
    content += option.description;
    return content += '\n';
  };
  describeCommand = function(command) {
    var content, option, _i, _len, _ref;
    content = pad("    " + command.name, 24);
    content += command.description;
    content += '\n';
    if (command.options) {
      _ref = command.options;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        content += describeOption(option);
      }
    }
    if (command.main) {
      content += pad("      " + command.main.name, 26);
      content += command.main.description;
      content += '\n';
    }
    return content;
  };
  if (action && action !== 'help') {
    command = this.config.actions[action];
    synopsis = this.config.name + ' ' + action;
    if (command.options) {
      options = 'options...';
      if (!(command.options.filter(function(o) {
        return o.required;
      })).length) {
        options = "[" + options + "]";
      }
      synopsis += " " + options;
    }
    if (command.main) {
      main = "" + command.main.name;
      if (!command.main.required) {
        main = "[" + main + "]";
      }
      synopsis += " " + main;
    }
    content = "NAME\n    " + this.config.name + " " + action + " - " + command.description + "\nSYNOPSIS\n    " + synopsis + "\nDESCRIPTION\n";
    return content += describeCommand(command);
  } else {
    content = "NAME\n    " + this.config.name + " - " + this.config.description + "\nSYNOPSIS\n    " + this.config.name + " action [options...]\n    where action is one of\n";
    _ref = this.config.actions;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      action = _ref[_i];
      content += pad("      " + action.name, 24);
      content += action.description;
      content += '\n';
    }
    content += "DESCRIPTION\n";
    _ref1 = this.config.actions;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      action = _ref1[_j];
      content += describeCommand(action);
    }
    content += "EXAMPLES\n    " + this.config.name + " help          Show this message";
    content += '\n';
    return content;
  }
};

/*

`decode([argv])`
----------------

Convert process arguments into a usable object. Argument may
be in the form of a string or an array. If not provided, it default
to `process.argv`.

Example

  options = argv.decode ['node', 'startstop', 'start', '--watch', __dirname, '-s', 'my', '--command']
  options.should.eql
    action: 'start'
    watch: __dirname
    strict: true
    command: 'my --command'
*/


Parameters.prototype.decode = function(argv) {
  var command, data, key, name, option, options, shortcut, value, _ref, _ref1, _ref2;
  if (argv == null) {
    argv = process.argv;
  }
  if (typeof argv === 'string') {
    argv = argv.split(' ');
  }
  argv.shift() && argv.shift();
  data = {};
  data.action = argv.shift();
  if ((_ref = data.action) == null) {
    data.action = 'help';
  }
  command = this.config.actions[data.action];
  if (!command) {
    throw new Error("Invalid action '" + data.action + "'");
  }
  while (true) {
    if (!argv.length || argv[0].substr(0, 1) !== '-') {
      break;
    }
    key = argv.shift();
    shortcut = key.substr(1, 1) !== '-';
    key = key.substring((shortcut ? 1 : 2), key.length);
    if (shortcut) {
      key = this.shortcuts[data.action][key];
    }
    option = this.bynames[data.action][key];
    if (!option) {
      throw new Error("Invalid option '" + key + "'");
    }
    switch (option.type) {
      case 'boolean':
        value = true;
        break;
      case 'string':
        value = argv.shift();
    }
    data[key] = value;
  }
  if (argv.length) {
    data.command = argv.join(' ');
  }
  _ref1 = this.bynames[data.action];
  for (name in _ref1) {
    options = _ref1[name];
    if (options.required) {
      if (data[name] == null) {
        throw new Error("Required main argument \"" + name + "\"");
      }
    }
    if ((_ref2 = data[name]) == null) {
      data[name] = null;
    }
  }
  return data;
};

/*

`encode([script], data)`
------------------------

Convert an object into process arguments.
*/


Parameters.prototype.encode = function(script, data) {
  var argv, command, key, option, value, _ref;
  if (arguments.length === 1) {
    data = script;
    script = null;
  }
  command = this.config.actions[data.action];
  if (!command) {
    throw new Error("Invalid action '" + data.action + "'");
  }
  argv = script ? [process.execPath, script] : [];
  argv.push(data.action);
  for (key in data) {
    value = data[key];
    if (key === 'action' || key === ((_ref = command.main) != null ? _ref.name : void 0)) {
      continue;
    }
    option = this.bynames[data.action][key];
    if (!option) {
      throw new Error("Invalid option '" + key + "'");
    }
    switch (option.type) {
      case 'boolean':
        if (value) {
          argv.push("--" + key);
        }
        break;
      case 'string':
        argv.push("--" + key);
        argv.push(value);
    }
  }
  if (command.main) {
    value = data[command.main.name];
    if (command.main.required && !(value != null)) {
      throw new Error("Required main argument \"" + command.main.name + "\"");
    }
    if (value != null) {
      argv.push(value);
    }
  }
  return argv;
};

module.exports = function(config) {
  return new Parameters(config);
};

module.exports.Parameters = Parameters;
