// Generated by CoffeeScript 1.4.0
var Parameters, pad, path;

path = require('path');

pad = require('pad');

Parameters = function(config) {
  var action, main, options, _fn, _i, _len, _ref, _ref1, _ref2, _ref3,
    _this = this;
  this.config = config != null ? config : {};
  options = function(action) {
    var option, _fn, _i, _len, _ref, _ref1, _results;
    _ref = action.options;
    _fn = function(option) {
      return action.options.__defineGetter__(option.name, function() {
        return option;
      });
    };
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      option = _ref[_i];
      _fn(option);
      if ((_ref1 = option.type) == null) {
        option.type = 'string';
      }
      _results.push(action.shortcuts[option.shortcut] = option.name);
    }
    return _results;
  };
  config.shortcuts = {};
  if ((_ref = config.options) == null) {
    config.options = [];
  }
  options(config);
  if ((_ref1 = config.actions) == null) {
    config.actions = [];
  }
  if (!Array.isArray(config.actions)) {
    config.actions = [config.actions];
  }
  _ref2 = config.actions;
  _fn = function(action) {
    return config.actions.__defineGetter__(action.name, function() {
      return action;
    });
  };
  for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
    action = _ref2[_i];
    _fn(action);
    main = action.main;
    action.shortcuts = {};
    if ((_ref3 = action.options) == null) {
      action.options = [];
    }
    if (!Array.isArray(action.options)) {
      action.options = [action.options];
    }
    options(action);
  }
  if (!config.actions.help) {
    if (config.actions.length) {
      config.actions.push({
        name: 'help',
        description: "Display help information about " + config.name,
        main: {
          name: 'command',
          description: 'Help about a specific action'
        }
      });
    } else {
      config.options.push({
        name: 'help',
        shortcut: 'h',
        description: "Display help information"
      });
    }
  }
  return this;
};

/*

`help([action])`
----------------

Return a string describing the usage of the overall command or one of its action.
*/


Parameters.prototype.help = function(action) {
  var command, content, describeCommand, describeOption, main, options, synopsis, _i, _j, _len, _len1, _ref, _ref1;
  command = this.config.actions[action];
  describeOption = function(option) {
    var content;
    content = pad("      -" + option.shortcut + " --" + option.name, 26);
    content += option.description;
    return content += '\n';
  };
  describeCommand = function(command) {
    var content, option, _i, _len, _ref;
    content = pad("    " + command.name, 24);
    content += command.description;
    content += '\n';
    if (command.options) {
      _ref = command.options;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        content += describeOption(option);
      }
    }
    if (command.main) {
      content += pad("      " + command.main.name, 26);
      content += command.main.description;
      content += '\n';
    }
    return content;
  };
  if (action && action !== 'help') {
    command = this.config.actions[action];
    synopsis = this.config.name + ' ' + action;
    if (command.options.length) {
      options = 'options...';
      if (!(command.options.filter(function(o) {
        return o.required;
      })).length) {
        options = "[" + options + "]";
      }
      synopsis += " " + options;
    }
    if (command.main) {
      main = "" + command.main.name;
      if (!command.main.required) {
        main = "[" + main + "]";
      }
      synopsis += " " + main;
    }
    content = "NAME\n    " + this.config.name + " " + action + " - " + command.description + "\nSYNOPSIS\n    " + synopsis + "\nDESCRIPTION\n";
    return content += describeCommand(command);
  } else {
    content = "NAME\n    " + this.config.name + " - " + this.config.description + "\nSYNOPSIS\n    " + this.config.name + " action [options...]\n    where action is one of\n";
    _ref = this.config.actions;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      action = _ref[_i];
      content += pad("      " + action.name, 24);
      content += action.description;
      content += '\n';
    }
    content += "DESCRIPTION\n";
    _ref1 = this.config.actions;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      action = _ref1[_j];
      content += describeCommand(action);
    }
    content += "EXAMPLES\n    " + this.config.name + " help          Show this message";
    content += '\n';
    return content;
  }
};

/*

`decode([argv])`
----------------

Convert process arguments into a usable object. Argument may
be in the form of a string or an array. If not provided, it default
to `process.argv`.

Example

  params = argv.decode ['node', 'startstop', 'start', '--watch', __dirname, '-s', 'my', '--command']
  params.should.eql
    action: 'start'
    watch: __dirname
    strict: true
    command: 'my --command'
*/


Parameters.prototype.decode = function(argv) {
  var action, decode, params;
  if (argv == null) {
    argv = process.argv;
  }
  if (typeof argv === 'string') {
    argv = argv.split(' ');
  }
  argv.shift() && argv.shift();
  params = {};
  decode = function(action, argv) {
    var key, main, option, options, shortcut, value, _i, _len, _ref;
    while (true) {
      if (!argv.length || argv[0].substr(0, 1) !== '-') {
        break;
      }
      key = argv.shift();
      shortcut = key.substr(1, 1) !== '-';
      key = key.substring((shortcut ? 1 : 2), key.length);
      if (shortcut) {
        key = action.shortcuts[key];
      }
      option = (_ref = action.options) != null ? _ref[key] : void 0;
      if (!option) {
        throw new Error("Invalid option '" + key + "'");
      }
      switch (option.type) {
        case 'boolean':
          value = true;
          break;
        case 'string':
          value = argv.shift();
      }
      params[key] = value;
    }
    if (argv.length) {
      params.command = argv.join(' ');
    }
    options = action.options;
    if (options) {
      for (_i = 0, _len = options.length; _i < _len; _i++) {
        option = options[_i];
        if (option.required) {
          if (params[option.name] == null) {
            throw new Error("Required argument \"" + option.name + "\"");
          }
        }
      }
    }
    main = action.main;
    if (main) {
      if (main.required) {
        if (params[main.name] == null) {
          throw new Error("Required main argument \"" + main.name + "\"");
        }
      }
    }
    return params;
  };
  if (this.config.actions.length && argv[0].substr(0, 1) !== '-') {
    action = this.config.actions[argv[0]];
    if (!action) {
      throw new Error("Invalid action '" + argv[0] + "'");
    }
    params.action = argv.shift();
  } else {
    action = this.config;
  }
  return decode(action, argv);
};

/*

`encode([script], params)`
------------------------

Convert an object into process arguments.
*/


Parameters.prototype.encode = function(script, params) {
  var argv, command, key, option, value, _ref, _ref1;
  if (arguments.length === 1) {
    params = script;
    script = null;
  }
  command = this.config.actions[params.action];
  if (!command) {
    throw new Error("Invalid action '" + params.action + "'");
  }
  argv = script ? [process.execPath, script] : [];
  argv.push(params.action);
  for (key in params) {
    value = params[key];
    if (key === 'action' || key === ((_ref = command.main) != null ? _ref.name : void 0)) {
      continue;
    }
    option = (_ref1 = this.config.actions[params.action].options) != null ? _ref1[key] : void 0;
    if (!option) {
      throw new Error("Invalid option '" + key + "'");
    }
    switch (option.type) {
      case 'boolean':
        if (value) {
          argv.push("--" + key);
        }
        break;
      case 'string':
        argv.push("--" + key);
        argv.push(value);
    }
  }
  if (command.main) {
    value = params[command.main.name];
    if (command.main.required && !(value != null)) {
      throw new Error("Required main argument \"" + command.main.name + "\"");
    }
    if (value != null) {
      argv.push(value);
    }
  }
  return argv;
};

module.exports = function(config) {
  return new Parameters(config);
};

module.exports.Parameters = Parameters;
