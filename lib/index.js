// Generated by CoffeeScript 1.8.0
var Parameters, pad, path, types;

path = require('path');

pad = require('pad');

types = ['string', 'boolean', 'integer', 'array'];


/*
parameters(config)
==================

About options
-------------
Options are defined at the "config" level or for each command.

About main
----------
Main is what's left after the options. Like options, "main" is 
defined at the "config" level or for each command.

Parameters are defined with the following properties
*   name:     name of the two dash parameter in the command (eg "--my_name") and in the returned parse object unless label is defined.
*   label:    not yet implemented, see name
*   shortcut: name of the one dash parameter in the command (eg "-n"), must be one charactere
*   required: boolean, throw an exception when true and the parameter is not defined
*   type:     one of 'string', 'boolean', 'integer' or 'array'
 */

Parameters = function(config) {
  var command, commands, makeCommand, options, _i, _len, _ref;
  if (config == null) {
    config = {};
  }
  this.config = config;
  options = function(command) {
    var option, _fn, _i, _len, _ref, _results;
    _ref = command.options;
    _fn = function(option) {
      return command.options.__defineGetter__(option.name, function() {
        return option;
      });
    };
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      option = _ref[_i];
      _fn(option);
      if (option.type == null) {
        option.type = 'string';
      }
      if (types.indexOf(option.type) === -1) {
        throw new Error("Invalid type \"" + option.type + "\"");
      }
      _results.push(command.shortcuts[option.shortcut] = option.name);
    }
    return _results;
  };
  config.shortcuts = {};
  if (config.options == null) {
    config.options = [];
  }
  options(config);
  if (config.command == null) {
    config.command = 'command';
  }
  if (config.commands == null) {
    config.commands = [];
  }
  if (!Array.isArray(config.commands)) {
    config.commands = [config.commands];
  }
  makeCommand = function(command) {
    config.commands.__defineGetter__(command.name, function() {
      return command;
    });
    if (command.strict == null) {
      command.strict = config.strict;
    }
    command.shortcuts = {};
    if (command.options == null) {
      command.options = [];
    }
    if (!Array.isArray(command.options)) {
      command.options = [command.options];
    }
    return options(command);
  };
  _ref = config.commands;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    command = _ref[_i];
    makeCommand(command);
  }
  if (!config.commands.help) {
    if (config.commands.length) {
      commands = {
        name: 'help',
        description: "Display help information about " + config.name,
        main: {
          name: 'name',
          description: 'Help about a specific command'
        }
      };
      config.commands.push(commands);
      makeCommand(commands);
    } else {
      config.options.push({
        name: 'help',
        shortcut: 'h',
        description: "Display help information"
      });
    }
  }
  return this;
};


/*

`parse([argv])`
----------------

Convert process arguments into a usable object. Argument may
be in the form of a string or an array. If not provided, it 
parse the arguments present in  `process.argv`.

You should only pass the parameters and the not the script name.

Example

  params = argv.parse ['start', '--watch', __dirname, '-s', 'my', '--command']
  params.should.eql
    action: 'start'
    watch: __dirname
    strict: true
    command: 'my --command'
 */

Parameters.prototype.parse = function(argv) {
  var config, index, params, parse;
  if (argv == null) {
    argv = process;
  }
  if (typeof argv === 'string') {
    argv = argv.split(' ');
  }
  index = 0;
  if (argv === process) {
    index = 2;
    argv = argv.argv;
  }
  params = {};
  parse = (function(_this) {
    return function(config) {
      var key, main, option, options, shortcut, type, _i, _len, _ref, _ref1, _ref2;
      while (true) {
        if (argv.length === index || argv[index].substr(0, 1) !== '-') {
          break;
        }
        key = argv[index++];
        shortcut = key.substr(1, 1) !== '-';
        key = key.substring((shortcut ? 1 : 2), key.length);
        if (shortcut) {
          shortcut = key;
        }
        if (shortcut) {
          key = config.shortcuts[shortcut];
        }
        option = (_ref = config.options) != null ? _ref[key] : void 0;
        if (!shortcut && config.strict && !option) {
          throw new Error("Invalid option '" + key + "'");
        }
        if (shortcut && !option) {
          throw new Error("Invalid shortcut '" + shortcut + "'");
        }
        if (!option) {
          type = argv[index] && argv[index][0] !== '-' ? 'string' : 'boolean';
          option = {
            name: key,
            type: type
          };
        }
        switch (option.type) {
          case 'boolean':
            params[key] = true;
            break;
          case 'string':
            params[key] = argv[index++];
            break;
          case 'integer':
            params[key] = parseInt(argv[index++], 10);
            break;
          case 'array':
            if (params[key] == null) {
              params[key] = [];
            }
            (_ref1 = params[key]).push.apply(_ref1, argv[index++].split(','));
        }
      }
      options = config.options;
      if (options) {
        for (_i = 0, _len = options.length; _i < _len; _i++) {
          option = options[_i];
          if (option.required) {
            if (!(params.help || (params[option.name] != null))) {
              throw new Error("Required argument \"" + option.name + "\"");
            }
          }
        }
      }
      if (argv.length !== index) {
        main = argv.slice(index).join(' ');
        if (config.main) {
          params[config.main.name] = main;
        } else {
          if ((_ref2 = config.commands) != null ? _ref2[argv[index]] : void 0) {
            config = _this.config.commands[argv[index]];
            params[_this.config.command] = argv[index++];
            parse(config, argv);
          } else {
            throw new Error("Fail to parse end of command \"" + main + "\"");
          }
        }
      }
      main = config.main;
      if (main) {
        if (main.required) {
          if (params[main.name] == null) {
            throw new Error("Required main argument \"" + main.name + "\"");
          }
        }
      }
      return params;
    };
  })(this);
  if (this.config.commands.length && argv.length === index) {
    argv.push('help');
  }
  if (this.config.commands.length && argv[index].substr(0, 1) !== '-') {
    config = this.config.commands[argv[index]];
    if (!config) {
      throw new Error("Invalid command '" + argv[index] + "'");
    }
    params[this.config.command] = argv[index++];
  } else {
    config = this.config;
  }
  return parse(config, argv);
};


/*

`stringify([script], params)`
------------------------

Convert an object into process arguments.
 */

Parameters.prototype.stringify = function(script, params) {
  var argv, config, key, keys, stringify, value;
  if (arguments.length === 1) {
    params = script;
    script = null;
  }
  argv = script ? [process.execPath, script] : [];
  keys = {};
  stringify = (function(_this) {
    return function(config) {
      var key, option, value, _i, _len, _ref;
      _ref = config.options;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        key = option.name;
        keys[key] = true;
        value = params[key];
        if (value == null) {
          if (!option.required) {
            continue;
          }
          throw new Error("Required option \"" + key + "\"");
        }
        switch (option.type) {
          case 'boolean':
            if (value) {
              argv.push("--" + key);
            }
            break;
          case 'string':
          case 'integer':
            argv.push("--" + key);
            argv.push("" + value);
            break;
          case 'array':
            argv.push("--" + key);
            argv.push("" + (value.join(',')));
        }
      }
      if (config.main) {
        value = params[config.main.name];
        if (config.main.required && (value == null)) {
          throw new Error("Required main argument \"" + config.main.name + "\"");
        }
        keys[config.main.name] = value;
        if (value != null) {
          return argv.push(value);
        }
      }
    };
  })(this);
  stringify(this.config);
  if (params[this.config.command]) {
    config = this.config.commands[params[this.config.command]];
    if (!config) {
      throw new Error("Invalid command '" + params[this.config.command] + "'");
    }
    argv.push(params[this.config.command]);
    keys[this.config.command] = params[this.config.command];
    stringify(config);
  }
  for (key in params) {
    value = params[key];
    if (keys[key]) {
      continue;
    }
    if (this.config.strict) {
      throw new Error("Invalid option '" + key + "'");
    }
    if (typeof value === 'boolean') {
      if (value) {
        argv.push("--" + key);
      }
    } else if (typeof value === 'undefined' || value === null) {

    } else {
      argv.push("--" + key);
      argv.push("" + value);
    }
  }
  return argv;
};


/*

`help([command])`
----------------

Return a string describing the usage of the overall command or one of its
command.
 */

Parameters.prototype.help = function(command) {
  var config, content, describeCommand, describeOption, main, option, options, shortcut, synopsis, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
  config = this.config.commands[command];
  if ((command != null) && !config) {
    throw Error("Invalid command \"" + command + "\"");
  }
  describeOption = function(option) {
    var content;
    content = pad("      -" + option.shortcut + " --" + option.name, 26);
    content += option.description;
    return content += '\n';
  };
  describeCommand = function(config) {
    var content, option, _i, _len, _ref;
    content = pad("    " + config.name, 24);
    content += config.description;
    content += '\n';
    if (config.options) {
      _ref = config.options;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        content += describeOption(option);
      }
    }
    if (config.main) {
      content += pad("      " + config.main.name, 26);
      content += config.main.description;
      content += '\n';
    }
    return content;
  };
  if (command && command !== 'help') {
    config = this.config.commands[command];
    synopsis = this.config.name + ' ' + command;
    if (config.options.length) {
      options = 'options...';
      if (!(config.options.filter(function(o) {
        return o.required;
      })).length) {
        options = "[" + options + "]";
      }
      synopsis += " " + options;
    }
    if (config.main) {
      main = "" + config.main.name;
      if (!config.main.required) {
        main = "[" + main + "]";
      }
      synopsis += " " + main;
    }
    content = "NAME\n    " + this.config.name + " " + command + " - " + config.description + "\nSYNOPSIS\n    " + synopsis + "\nDESCRIPTION\n";
    return content += describeCommand(config);
  } else {
    content = "NAME\n    " + this.config.name + " - " + this.config.description + "\n";
    content += 'SYNOPSIS\n';
    content += "    " + this.config.name;
    if (this.config.commands.length) {
      content += ' command';
    }
    content += ' [options...]';
    content += '\n';
    if (this.config.commands.length) {
      content += '    where command is one of';
      content += '\n';
    }
    _ref = this.config.commands;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      command = _ref[_i];
      content += pad("      " + command.name, 24);
      content += command.description;
      content += '\n';
    }
    content += 'DESCRIPTION\n';
    _ref1 = this.config.options;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      option = _ref1[_j];
      shortcut = option.shortcut ? "-" + option.shortcut + " " : '';
      content += pad("    " + shortcut + "--" + option.name, 24);
      content += option.description;
      content += '\n';
    }
    if (this.config.main) {
      content += pad("    " + this.config.main.name, 24);
      content += this.config.main.description;
      content += '\n';
    }
    _ref2 = this.config.commands;
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      command = _ref2[_k];
      content += describeCommand(command);
    }
    content += 'EXAMPLES\n';
    if (this.config.commands.length) {
      content += "    " + this.config.name + " help       Show this message";
    } else {
      content += "    " + this.config.name + " --help     Show this message";
    }
    content += '\n';
    return content;
  }
};

module.exports = function(config) {
  return new Parameters(config);
};

module.exports.Parameters = Parameters;
